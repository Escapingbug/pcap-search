#!/bin/zsh
set -e -u
setopt nullglob

program=$0
dshell_defcon=${0:a:h}/dshell-defcon
pcap_suffix=.cap
ap_suffix=.ap

usage() {
  cat <<e
Usage: ${program##*/} dir...
Transform .cap files into .ap files

Options:
  -p max-procs   Run up to max-procs dshell-decode at a time (currently by detecting python2 processes, inaccurate)
e
  exit $1
}

fatal() {
  echo ${@:2}
  exit $1
}

log_generic() {
  fmt=$1
  print -- "$(date +%T.%N) $fmt" "${@:2}"
}
log_error() { tput setaf 1; log_generic "$@"; tput sgr0 }
log_action() { tput setaf 2; log_generic "$@"; tput sgr0 }
log_status() { tput setaf 3; log_generic "$@"; tput sgr0 }
log_event() { tput setaf 6; log_generic "$@"; tput sgr0 }

declare -A modified
add() { modified[$1]=1 }
del() { unset "modified[$1]" }

semaphore() {
  seq $parallel
  while read; do
    echo
  done
}

add_data() {
  local filepath=$1
  log_status found $filepath
  (
    read -p
    start=$(date +%s.%N)
    $dshell_defcon/dshell-decode -d stream2dump --stream2dump_outfiles=$filepath$ap_suffix $filepath >/dev/null
    stop=$(date +%s.%N)
    log_action created $ap_suffix for $filepath, size: $(stat -c %s $filepath), used $(bc -l<<<"scale=3;($stop-$start)/1") s
    print -p
  ) &
}

rm_data() {
  rm -fv $filepath$ap_suffix
}

parallel=$(nproc)
while getopts h opt; do
  case $opt; in
    h) usage 0;;
    p) parallel=$OPTIND;;
    \?) exit;;
  esac
done

if [[ -z ${1:-} ]]; then
  usage 1
fi
for i in $@; do
  [[ -d $i ]] || fatal 1 is not a directory
done

coproc semaphore

main() {
  log_status processing $@

  for dir in $@; do
    for i in $dir/*$pcap_suffix; do
      [[ -e $i$ap_suffix && ! -z $i$ap_suffix ]] || add_data $i
    done
  done

  log_status start inotify

  inotifywait -mqe CREATE,CLOSE_WRITE,DELETE,MODIFY,MOVE --format $'%e\t%w\t%f' $@ | while IFS=$'\t' read -r event dir filename; do
    [[ $filename =~ "\\$pcap_suffix\$" ]] || continue
    local filepath=$dir/$filename
    if [[ $event =~ CREATE ]]; then
      log_event CREATE $filepath
      if filetype=$(stat -c %F $filepath); then
        if [[ $filetype =~ symbolic ]]; then
          add_data $filepath
        else
          add $filepath
        fi
      fi
    elif [[ $event =~ DELETE ]]; then
      log_event DELETE $filepath
      del $filepath
      rm_data $filepath
    elif [[ $event =~ MOVED_FROM ]]; then
      log_event MOVED_FROM $filepath
      del $filepath
      rm_data $filepath
    elif [[ $event =~ MOVED_TO ]]; then
      log_event MOVED_TO $filepath
      add_data $filepath
    elif [[ $event =~ MODIFY ]]; then
      log_event MODIFY $filepath
      add $filepath
    elif [[ $event =~ CLOSE_WRITE ]]; then
      if [[ -n ${modified[$filepath]} ]]; then
        log_event CLOSE_WRITE after MODIFY $filepath
        del $filepath
        add_data $filepath
      else
        log_event CLOSE_WRITE $filepath
      fi
    fi
  done
}

main $@
